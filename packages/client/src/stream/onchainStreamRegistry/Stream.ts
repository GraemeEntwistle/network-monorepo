// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
    TypedMap,
    Entity,
    Value,
    ValueKind,
    store,
    Address,
    Bytes,
    BigInt,
    BigDecimal
  } from "@graphprotocol/graph-ts";
  
  export class Stream extends Entity {
    constructor(id: string) {
      super();
      this.set("id", Value.fromString(id));
    }
  
    save(): void {
      let id = this.get("id");
      assert(id !== null, "Cannot save Stream entity without an ID");
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Stream entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Stream", id.toString(), this);
    }
  
    static load(id: string): Stream | null {
      return store.get("Stream", id) as Stream | null;
    }
  
    get id(): string {
      let value = this.get("id");
      return value.toString();
    }
  
    set id(value: string) {
      this.set("id", Value.fromString(value));
    }
  
    get metadata(): string {
      let value = this.get("metadata");
      return value.toString();
    }
  
    set metadata(value: string) {
      this.set("metadata", Value.fromString(value));
    }
  
    get permissions(): Array<string | null> {
      let value = this.get("permissions");
      return value.toStringArray();
    }
  
    set permissions(value: Array<string | null>) {
      this.set("permissions", Value.fromStringArray(value));
    }
  }
  
  export class Permission extends Entity {
    constructor(id: string) {
      super();
      this.set("id", Value.fromString(id));
    }
  
    save(): void {
      let id = this.get("id");
      assert(id !== null, "Cannot save Permission entity without an ID");
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Permission entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Permission", id.toString(), this);
    }
  
    static load(id: string): Permission | null {
      return store.get("Permission", id) as Permission | null;
    }
  
    get id(): string {
      let value = this.get("id");
      return value.toString();
    }
  
    set id(value: string) {
      this.set("id", Value.fromString(value));
    }
  
    get user(): Bytes {
      let value = this.get("user");
      return value.toBytes();
    }
  
    set user(value: Bytes) {
      this.set("user", Value.fromBytes(value));
    }
  
    get stream(): string | null {
      let value = this.get("stream");
      if (value === null || value.kind == ValueKind.NULL) {
        return null;
      } else {
        return value.toString();
      }
    }
  
    set stream(value: string | null) {
      if (value === null) {
        this.unset("stream");
      } else {
        this.set("stream", Value.fromString(value as string));
      }
    }
  
    get edit(): boolean {
      let value = this.get("edit");
      return value.toBoolean();
    }
  
    set edit(value: boolean) {
      this.set("edit", Value.fromBoolean(value));
    }
  
    get canDelete(): boolean {
      let value = this.get("canDelete");
      return value.toBoolean();
    }
  
    set canDelete(value: boolean) {
      this.set("canDelete", Value.fromBoolean(value));
    }
  
    get publish(): boolean {
      let value = this.get("publish");
      return value.toBoolean();
    }
  
    set publish(value: boolean) {
      this.set("publish", Value.fromBoolean(value));
    }
  
    get subscribed(): boolean {
      let value = this.get("subscribed");
      return value.toBoolean();
    }
  
    set subscribed(value: boolean) {
      this.set("subscribed", Value.fromBoolean(value));
    }
  
    get share(): boolean {
      let value = this.get("share");
      return value.toBoolean();
    }
  
    set share(value: boolean) {
      this.set("share", Value.fromBoolean(value));
    }
  }
  