/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    Contract,
    ContractTransaction,
    Overrides,
    CallOverrides,
  } from "ethers";
  import { BytesLike } from "@ethersproject/bytes";
  import { Listener, Provider } from "@ethersproject/providers";
  import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
  import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";
  
  interface StreamRegistryInterface extends ethers.utils.Interface {
    functions: {
      "addressToString(address)": FunctionFragment;
      "createStream(string,string)": FunctionFragment;
      "createStreamWithENS(string,string,string)": FunctionFragment;
      "deleteStream(string)": FunctionFragment;
      "getAddressKey(string,address)": FunctionFragment;
      "getDirectPermissionsForUser(string,address)": FunctionFragment;
      "getPermissionsForUser(string,address)": FunctionFragment;
      "getStreamMetadata(string)": FunctionFragment;
      "grantPermission(string,address,uint8)": FunctionFragment;
      "grantPublicPermission(string,uint8)": FunctionFragment;
      "hasDirectPermission(string,address,uint8)": FunctionFragment;
      "hasPermission(string,address,uint8)": FunctionFragment;
      "isTrustedForwarder(address)": FunctionFragment;
      "migrationActive()": FunctionFragment;
      "migrator()": FunctionFragment;
      "migratorSetPermissionsForUser(string,address,bool,bool,bool,bool,bool)": FunctionFragment;
      "migratorSetStream(string,string)": FunctionFragment;
      "revokeAllPermissionsForUser(string,address)": FunctionFragment;
      "revokePermission(string,address,uint8)": FunctionFragment;
      "revokePublicPermission(string,uint8)": FunctionFragment;
      "setMigrationComplete()": FunctionFragment;
      "setPermissionsForUser(string,address,bool,bool,bool,bool,bool)": FunctionFragment;
      "setPublicPermission(string,bool,bool)": FunctionFragment;
      "streamIdToMetadata(string)": FunctionFragment;
      "streamIdToPermissions(string,bytes32)": FunctionFragment;
      "transferAllPermissionsToUser(string,address)": FunctionFragment;
      "transferPermissionToUser(string,address,uint8)": FunctionFragment;
      "updateStreamMetadata(string,string)": FunctionFragment;
    };
  
    encodeFunctionData(
      functionFragment: "addressToString",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "createStream",
      values: [string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "createStreamWithENS",
      values: [string, string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "deleteStream",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "getAddressKey",
      values: [string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "getDirectPermissionsForUser",
      values: [string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "getPermissionsForUser",
      values: [string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "getStreamMetadata",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "grantPermission",
      values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "grantPublicPermission",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "hasDirectPermission",
      values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "hasPermission",
      values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "isTrustedForwarder",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "migrationActive",
      values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "migrator", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "migratorSetPermissionsForUser",
      values: [string, string, boolean, boolean, boolean, boolean, boolean]
    ): string;
    encodeFunctionData(
      functionFragment: "migratorSetStream",
      values: [string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "revokeAllPermissionsForUser",
      values: [string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "revokePermission",
      values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "revokePublicPermission",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "setMigrationComplete",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "setPermissionsForUser",
      values: [string, string, boolean, boolean, boolean, boolean, boolean]
    ): string;
    encodeFunctionData(
      functionFragment: "setPublicPermission",
      values: [string, boolean, boolean]
    ): string;
    encodeFunctionData(
      functionFragment: "streamIdToMetadata",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "streamIdToPermissions",
      values: [string, BytesLike]
    ): string;
    encodeFunctionData(
      functionFragment: "transferAllPermissionsToUser",
      values: [string, string]
    ): string;
    encodeFunctionData(
      functionFragment: "transferPermissionToUser",
      values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "updateStreamMetadata",
      values: [string, string]
    ): string;
  
    decodeFunctionResult(
      functionFragment: "addressToString",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "createStream",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "createStreamWithENS",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "deleteStream",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "getAddressKey",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "getDirectPermissionsForUser",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "getPermissionsForUser",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "getStreamMetadata",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "grantPermission",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "grantPublicPermission",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "hasDirectPermission",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "hasPermission",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "isTrustedForwarder",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "migrationActive",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "migrator", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "migratorSetPermissionsForUser",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "migratorSetStream",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "revokeAllPermissionsForUser",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "revokePermission",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "revokePublicPermission",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setMigrationComplete",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setPermissionsForUser",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setPublicPermission",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "streamIdToMetadata",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "streamIdToPermissions",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferAllPermissionsToUser",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferPermissionToUser",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "updateStreamMetadata",
      data: BytesLike
    ): Result;
  
    events: {
      "PermissionUpdated(string,address,bool,bool,bool,bool,bool)": EventFragment;
      "StreamCreated(string,string)": EventFragment;
      "StreamDeleted(string)": EventFragment;
      "StreamUpdated(string,string)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "PermissionUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StreamCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StreamDeleted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StreamUpdated"): EventFragment;
  }
  
  export class StreamRegistry extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this;
  
    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;
  
    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
      event: TypedEventFilter<EventArgsArray, EventArgsObject>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
  
    interface: StreamRegistryInterface;
  
    functions: {
      addressToString(
        _address: string,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      "addressToString(address)"(
        _address: string,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      createStream(
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "createStream(string,string)"(
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      createStreamWithENS(
        ensName: string,
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "createStreamWithENS(string,string,string)"(
        ensName: string,
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      deleteStream(
        streamId: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "deleteStream(string)"(
        streamId: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      getAddressKey(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      "getAddressKey(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      getDirectPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<
        [
          [boolean, boolean, boolean, boolean, boolean] & {
            edit: boolean;
            canDelete: boolean;
            publish: boolean;
            subscribed: boolean;
            share: boolean;
          }
        ] & {
          permission: [boolean, boolean, boolean, boolean, boolean] & {
            edit: boolean;
            canDelete: boolean;
            publish: boolean;
            subscribed: boolean;
            share: boolean;
          };
        }
      >;
  
      "getDirectPermissionsForUser(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<
        [
          [boolean, boolean, boolean, boolean, boolean] & {
            edit: boolean;
            canDelete: boolean;
            publish: boolean;
            subscribed: boolean;
            share: boolean;
          }
        ] & {
          permission: [boolean, boolean, boolean, boolean, boolean] & {
            edit: boolean;
            canDelete: boolean;
            publish: boolean;
            subscribed: boolean;
            share: boolean;
          };
        }
      >;
  
      getPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<
        [
          [boolean, boolean, boolean, boolean, boolean] & {
            edit: boolean;
            canDelete: boolean;
            publish: boolean;
            subscribed: boolean;
            share: boolean;
          }
        ] & {
          permission: [boolean, boolean, boolean, boolean, boolean] & {
            edit: boolean;
            canDelete: boolean;
            publish: boolean;
            subscribed: boolean;
            share: boolean;
          };
        }
      >;
  
      "getPermissionsForUser(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<
        [
          [boolean, boolean, boolean, boolean, boolean] & {
            edit: boolean;
            canDelete: boolean;
            publish: boolean;
            subscribed: boolean;
            share: boolean;
          }
        ] & {
          permission: [boolean, boolean, boolean, boolean, boolean] & {
            edit: boolean;
            canDelete: boolean;
            publish: boolean;
            subscribed: boolean;
            share: boolean;
          };
        }
      >;
  
      getStreamMetadata(
        streamId: string,
        overrides?: CallOverrides
      ): Promise<[string] & { des: string }>;
  
      "getStreamMetadata(string)"(
        streamId: string,
        overrides?: CallOverrides
      ): Promise<[string] & { des: string }>;
  
      grantPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "grantPermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      grantPublicPermission(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "grantPublicPermission(string,uint8)"(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      hasDirectPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[boolean] & { userHasPermission: boolean }>;
  
      "hasDirectPermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[boolean] & { userHasPermission: boolean }>;
  
      hasPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[boolean] & { userHasPermission: boolean }>;
  
      "hasPermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[boolean] & { userHasPermission: boolean }>;
  
      isTrustedForwarder(
        forwarder: string,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      "isTrustedForwarder(address)"(
        forwarder: string,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      migrationActive(overrides?: CallOverrides): Promise<[boolean]>;
  
      "migrationActive()"(overrides?: CallOverrides): Promise<[boolean]>;
  
      migrator(overrides?: CallOverrides): Promise<[string]>;
  
      "migrator()"(overrides?: CallOverrides): Promise<[string]>;
  
      migratorSetPermissionsForUser(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "migratorSetPermissionsForUser(string,address,bool,bool,bool,bool,bool)"(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      migratorSetStream(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "migratorSetStream(string,string)"(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      revokeAllPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "revokeAllPermissionsForUser(string,address)"(
        streamId: string,
        user: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      revokePermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "revokePermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      revokePublicPermission(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "revokePublicPermission(string,uint8)"(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setMigrationComplete(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "setMigrationComplete()"(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setPermissionsForUser(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "setPermissionsForUser(string,address,bool,bool,bool,bool,bool)"(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setPublicPermission(
        streamId: string,
        publish: boolean,
        subscribe: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "setPublicPermission(string,bool,bool)"(
        streamId: string,
        publish: boolean,
        subscribe: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      streamIdToMetadata(
        arg0: string,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      "streamIdToMetadata(string)"(
        arg0: string,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      streamIdToPermissions(
        arg0: string,
        arg1: BytesLike,
        overrides?: CallOverrides
      ): Promise<
        [boolean, boolean, boolean, boolean, boolean] & {
          edit: boolean;
          canDelete: boolean;
          publish: boolean;
          subscribed: boolean;
          share: boolean;
        }
      >;
  
      "streamIdToPermissions(string,bytes32)"(
        arg0: string,
        arg1: BytesLike,
        overrides?: CallOverrides
      ): Promise<
        [boolean, boolean, boolean, boolean, boolean] & {
          edit: boolean;
          canDelete: boolean;
          publish: boolean;
          subscribed: boolean;
          share: boolean;
        }
      >;
  
      transferAllPermissionsToUser(
        streamId: string,
        recipient: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "transferAllPermissionsToUser(string,address)"(
        streamId: string,
        recipient: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      transferPermissionToUser(
        streamId: string,
        recipient: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "transferPermissionToUser(string,address,uint8)"(
        streamId: string,
        recipient: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      updateStreamMetadata(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "updateStreamMetadata(string,string)"(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
    };
  
    addressToString(_address: string, overrides?: CallOverrides): Promise<string>;
  
    "addressToString(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;
  
    createStream(
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "createStream(string,string)"(
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    createStreamWithENS(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "createStreamWithENS(string,string,string)"(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    deleteStream(
      streamId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "deleteStream(string)"(
      streamId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    getAddressKey(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<string>;
  
    "getAddressKey(string,address)"(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<string>;
  
    getDirectPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean] & {
        edit: boolean;
        canDelete: boolean;
        publish: boolean;
        subscribed: boolean;
        share: boolean;
      }
    >;
  
    "getDirectPermissionsForUser(string,address)"(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean] & {
        edit: boolean;
        canDelete: boolean;
        publish: boolean;
        subscribed: boolean;
        share: boolean;
      }
    >;
  
    getPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean] & {
        edit: boolean;
        canDelete: boolean;
        publish: boolean;
        subscribed: boolean;
        share: boolean;
      }
    >;
  
    "getPermissionsForUser(string,address)"(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean] & {
        edit: boolean;
        canDelete: boolean;
        publish: boolean;
        subscribed: boolean;
        share: boolean;
      }
    >;
  
    getStreamMetadata(
      streamId: string,
      overrides?: CallOverrides
    ): Promise<string>;
  
    "getStreamMetadata(string)"(
      streamId: string,
      overrides?: CallOverrides
    ): Promise<string>;
  
    grantPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "grantPermission(string,address,uint8)"(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    grantPublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "grantPublicPermission(string,uint8)"(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    hasDirectPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    "hasDirectPermission(string,address,uint8)"(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    hasPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    "hasPermission(string,address,uint8)"(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    migrationActive(overrides?: CallOverrides): Promise<boolean>;
  
    "migrationActive()"(overrides?: CallOverrides): Promise<boolean>;
  
    migrator(overrides?: CallOverrides): Promise<string>;
  
    "migrator()"(overrides?: CallOverrides): Promise<string>;
  
    migratorSetPermissionsForUser(
      streamId: string,
      user: string,
      edit: boolean,
      deletePerm: boolean,
      publish: boolean,
      subscribe: boolean,
      share: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "migratorSetPermissionsForUser(string,address,bool,bool,bool,bool,bool)"(
      streamId: string,
      user: string,
      edit: boolean,
      deletePerm: boolean,
      publish: boolean,
      subscribe: boolean,
      share: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    migratorSetStream(
      streamId: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "migratorSetStream(string,string)"(
      streamId: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    revokeAllPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "revokeAllPermissionsForUser(string,address)"(
      streamId: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    revokePermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "revokePermission(string,address,uint8)"(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    revokePublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "revokePublicPermission(string,uint8)"(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setMigrationComplete(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "setMigrationComplete()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setPermissionsForUser(
      streamId: string,
      user: string,
      edit: boolean,
      deletePerm: boolean,
      publish: boolean,
      subscribe: boolean,
      share: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "setPermissionsForUser(string,address,bool,bool,bool,bool,bool)"(
      streamId: string,
      user: string,
      edit: boolean,
      deletePerm: boolean,
      publish: boolean,
      subscribe: boolean,
      share: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setPublicPermission(
      streamId: string,
      publish: boolean,
      subscribe: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "setPublicPermission(string,bool,bool)"(
      streamId: string,
      publish: boolean,
      subscribe: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    streamIdToMetadata(arg0: string, overrides?: CallOverrides): Promise<string>;
  
    "streamIdToMetadata(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;
  
    streamIdToPermissions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean] & {
        edit: boolean;
        canDelete: boolean;
        publish: boolean;
        subscribed: boolean;
        share: boolean;
      }
    >;
  
    "streamIdToPermissions(string,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean, boolean, boolean] & {
        edit: boolean;
        canDelete: boolean;
        publish: boolean;
        subscribed: boolean;
        share: boolean;
      }
    >;
  
    transferAllPermissionsToUser(
      streamId: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "transferAllPermissionsToUser(string,address)"(
      streamId: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    transferPermissionToUser(
      streamId: string,
      recipient: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "transferPermissionToUser(string,address,uint8)"(
      streamId: string,
      recipient: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    updateStreamMetadata(
      streamId: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "updateStreamMetadata(string,string)"(
      streamId: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    callStatic: {
      addressToString(
        _address: string,
        overrides?: CallOverrides
      ): Promise<string>;
  
      "addressToString(address)"(
        _address: string,
        overrides?: CallOverrides
      ): Promise<string>;
  
      createStream(
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "createStream(string,string)"(
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      createStreamWithENS(
        ensName: string,
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "createStreamWithENS(string,string,string)"(
        ensName: string,
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      deleteStream(streamId: string, overrides?: CallOverrides): Promise<void>;
  
      "deleteStream(string)"(
        streamId: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      getAddressKey(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<string>;
  
      "getAddressKey(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<string>;
  
      getDirectPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<
        [boolean, boolean, boolean, boolean, boolean] & {
          edit: boolean;
          canDelete: boolean;
          publish: boolean;
          subscribed: boolean;
          share: boolean;
        }
      >;
  
      "getDirectPermissionsForUser(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<
        [boolean, boolean, boolean, boolean, boolean] & {
          edit: boolean;
          canDelete: boolean;
          publish: boolean;
          subscribed: boolean;
          share: boolean;
        }
      >;
  
      getPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<
        [boolean, boolean, boolean, boolean, boolean] & {
          edit: boolean;
          canDelete: boolean;
          publish: boolean;
          subscribed: boolean;
          share: boolean;
        }
      >;
  
      "getPermissionsForUser(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<
        [boolean, boolean, boolean, boolean, boolean] & {
          edit: boolean;
          canDelete: boolean;
          publish: boolean;
          subscribed: boolean;
          share: boolean;
        }
      >;
  
      getStreamMetadata(
        streamId: string,
        overrides?: CallOverrides
      ): Promise<string>;
  
      "getStreamMetadata(string)"(
        streamId: string,
        overrides?: CallOverrides
      ): Promise<string>;
  
      grantPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "grantPermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      grantPublicPermission(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "grantPublicPermission(string,uint8)"(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      hasDirectPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      "hasDirectPermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      hasPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      "hasPermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      isTrustedForwarder(
        forwarder: string,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      "isTrustedForwarder(address)"(
        forwarder: string,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      migrationActive(overrides?: CallOverrides): Promise<boolean>;
  
      "migrationActive()"(overrides?: CallOverrides): Promise<boolean>;
  
      migrator(overrides?: CallOverrides): Promise<string>;
  
      "migrator()"(overrides?: CallOverrides): Promise<string>;
  
      migratorSetPermissionsForUser(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "migratorSetPermissionsForUser(string,address,bool,bool,bool,bool,bool)"(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: CallOverrides
      ): Promise<void>;
  
      migratorSetStream(
        streamId: string,
        metadata: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "migratorSetStream(string,string)"(
        streamId: string,
        metadata: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      revokeAllPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "revokeAllPermissionsForUser(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      revokePermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "revokePermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      revokePublicPermission(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "revokePublicPermission(string,uint8)"(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setMigrationComplete(overrides?: CallOverrides): Promise<void>;
  
      "setMigrationComplete()"(overrides?: CallOverrides): Promise<void>;
  
      setPermissionsForUser(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "setPermissionsForUser(string,address,bool,bool,bool,bool,bool)"(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setPublicPermission(
        streamId: string,
        publish: boolean,
        subscribe: boolean,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "setPublicPermission(string,bool,bool)"(
        streamId: string,
        publish: boolean,
        subscribe: boolean,
        overrides?: CallOverrides
      ): Promise<void>;
  
      streamIdToMetadata(
        arg0: string,
        overrides?: CallOverrides
      ): Promise<string>;
  
      "streamIdToMetadata(string)"(
        arg0: string,
        overrides?: CallOverrides
      ): Promise<string>;
  
      streamIdToPermissions(
        arg0: string,
        arg1: BytesLike,
        overrides?: CallOverrides
      ): Promise<
        [boolean, boolean, boolean, boolean, boolean] & {
          edit: boolean;
          canDelete: boolean;
          publish: boolean;
          subscribed: boolean;
          share: boolean;
        }
      >;
  
      "streamIdToPermissions(string,bytes32)"(
        arg0: string,
        arg1: BytesLike,
        overrides?: CallOverrides
      ): Promise<
        [boolean, boolean, boolean, boolean, boolean] & {
          edit: boolean;
          canDelete: boolean;
          publish: boolean;
          subscribed: boolean;
          share: boolean;
        }
      >;
  
      transferAllPermissionsToUser(
        streamId: string,
        recipient: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "transferAllPermissionsToUser(string,address)"(
        streamId: string,
        recipient: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      transferPermissionToUser(
        streamId: string,
        recipient: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "transferPermissionToUser(string,address,uint8)"(
        streamId: string,
        recipient: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      updateStreamMetadata(
        streamId: string,
        metadata: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "updateStreamMetadata(string,string)"(
        streamId: string,
        metadata: string,
        overrides?: CallOverrides
      ): Promise<void>;
    };
  
    filters: {
      PermissionUpdated(
        streamId: null,
        user: null,
        edit: null,
        canDelete: null,
        publish: null,
        subscribed: null,
        share: null
      ): TypedEventFilter<
        [string, string, boolean, boolean, boolean, boolean, boolean],
        {
          streamId: string;
          user: string;
          edit: boolean;
          canDelete: boolean;
          publish: boolean;
          subscribed: boolean;
          share: boolean;
        }
      >;
  
      StreamCreated(
        id: null,
        metadata: null
      ): TypedEventFilter<[string, string], { id: string; metadata: string }>;
  
      StreamDeleted(id: null): TypedEventFilter<[string], { id: string }>;
  
      StreamUpdated(
        id: null,
        metadata: null
      ): TypedEventFilter<[string, string], { id: string; metadata: string }>;
    };
  
    estimateGas: {
      addressToString(
        _address: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "addressToString(address)"(
        _address: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      createStream(
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "createStream(string,string)"(
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      createStreamWithENS(
        ensName: string,
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "createStreamWithENS(string,string,string)"(
        ensName: string,
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      deleteStream(
        streamId: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "deleteStream(string)"(
        streamId: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      getAddressKey(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "getAddressKey(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      getDirectPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "getDirectPermissionsForUser(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      getPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "getPermissionsForUser(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      getStreamMetadata(
        streamId: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "getStreamMetadata(string)"(
        streamId: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      grantPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "grantPermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      grantPublicPermission(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "grantPublicPermission(string,uint8)"(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      hasDirectPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "hasDirectPermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      hasPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "hasPermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      isTrustedForwarder(
        forwarder: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "isTrustedForwarder(address)"(
        forwarder: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      migrationActive(overrides?: CallOverrides): Promise<BigNumber>;
  
      "migrationActive()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      migrator(overrides?: CallOverrides): Promise<BigNumber>;
  
      "migrator()"(overrides?: CallOverrides): Promise<BigNumber>;
  
      migratorSetPermissionsForUser(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "migratorSetPermissionsForUser(string,address,bool,bool,bool,bool,bool)"(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      migratorSetStream(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "migratorSetStream(string,string)"(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      revokeAllPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "revokeAllPermissionsForUser(string,address)"(
        streamId: string,
        user: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      revokePermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "revokePermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      revokePublicPermission(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "revokePublicPermission(string,uint8)"(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setMigrationComplete(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "setMigrationComplete()"(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setPermissionsForUser(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "setPermissionsForUser(string,address,bool,bool,bool,bool,bool)"(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setPublicPermission(
        streamId: string,
        publish: boolean,
        subscribe: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "setPublicPermission(string,bool,bool)"(
        streamId: string,
        publish: boolean,
        subscribe: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      streamIdToMetadata(
        arg0: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "streamIdToMetadata(string)"(
        arg0: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      streamIdToPermissions(
        arg0: string,
        arg1: BytesLike,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      "streamIdToPermissions(string,bytes32)"(
        arg0: string,
        arg1: BytesLike,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      transferAllPermissionsToUser(
        streamId: string,
        recipient: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "transferAllPermissionsToUser(string,address)"(
        streamId: string,
        recipient: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      transferPermissionToUser(
        streamId: string,
        recipient: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "transferPermissionToUser(string,address,uint8)"(
        streamId: string,
        recipient: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      updateStreamMetadata(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "updateStreamMetadata(string,string)"(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
    };
  
    populateTransaction: {
      addressToString(
        _address: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "addressToString(address)"(
        _address: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      createStream(
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "createStream(string,string)"(
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      createStreamWithENS(
        ensName: string,
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "createStreamWithENS(string,string,string)"(
        ensName: string,
        streamIdPath: string,
        metadataJsonString: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      deleteStream(
        streamId: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "deleteStream(string)"(
        streamId: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      getAddressKey(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "getAddressKey(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      getDirectPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "getDirectPermissionsForUser(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      getPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "getPermissionsForUser(string,address)"(
        streamId: string,
        user: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      getStreamMetadata(
        streamId: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "getStreamMetadata(string)"(
        streamId: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      grantPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "grantPermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      grantPublicPermission(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "grantPublicPermission(string,uint8)"(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      hasDirectPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "hasDirectPermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      hasPermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "hasPermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      isTrustedForwarder(
        forwarder: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "isTrustedForwarder(address)"(
        forwarder: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      migrationActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "migrationActive()"(
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      migrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      "migrator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      migratorSetPermissionsForUser(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "migratorSetPermissionsForUser(string,address,bool,bool,bool,bool,bool)"(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      migratorSetStream(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "migratorSetStream(string,string)"(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      revokeAllPermissionsForUser(
        streamId: string,
        user: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "revokeAllPermissionsForUser(string,address)"(
        streamId: string,
        user: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      revokePermission(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "revokePermission(string,address,uint8)"(
        streamId: string,
        user: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      revokePublicPermission(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "revokePublicPermission(string,uint8)"(
        streamId: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setMigrationComplete(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "setMigrationComplete()"(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setPermissionsForUser(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "setPermissionsForUser(string,address,bool,bool,bool,bool,bool)"(
        streamId: string,
        user: string,
        edit: boolean,
        deletePerm: boolean,
        publish: boolean,
        subscribe: boolean,
        share: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setPublicPermission(
        streamId: string,
        publish: boolean,
        subscribe: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "setPublicPermission(string,bool,bool)"(
        streamId: string,
        publish: boolean,
        subscribe: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      streamIdToMetadata(
        arg0: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "streamIdToMetadata(string)"(
        arg0: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      streamIdToPermissions(
        arg0: string,
        arg1: BytesLike,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "streamIdToPermissions(string,bytes32)"(
        arg0: string,
        arg1: BytesLike,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      transferAllPermissionsToUser(
        streamId: string,
        recipient: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "transferAllPermissionsToUser(string,address)"(
        streamId: string,
        recipient: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      transferPermissionToUser(
        streamId: string,
        recipient: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "transferPermissionToUser(string,address,uint8)"(
        streamId: string,
        recipient: string,
        permissionType: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      updateStreamMetadata(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "updateStreamMetadata(string,string)"(
        streamId: string,
        metadata: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
    };
  }
  